cmake_minimum_required(VERSION 3.21)

project(goopax_examples LANGUAGES CXX)

set (CMAKE_CXX_STANDARD 20)

if (APPLE)
  enable_language(OBJCXX)
  set (CMAKE_OBJCXX_STANDARD 20)
  include(cmake/common.cmake)
endif()

# Disabling cuda examples by default because of compatibility issues between cuda and gcc>=13
option(WITH_CUDA "WITH_CUDA" OFF)

set(CMAKE_INSTALL_RPATH_USE_LINK_PATH on)

if (ANDROID OR IOS)
  message("Applying toolchain workaround, so that packages are found.")
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)
endif()

find_package(goopax REQUIRED)
find_package(Threads)
find_package(OpenCL)

include(ExternalProject)
find_package(Eigen3 3.3 NO_MODULE HINTS ../tmp/eigen)
if (NOT Eigen3_FOUND)
  include(cmake/Eigen.cmake)
endif ()
find_package(OpenCV HINTS ../tmp/opencv)
if (NOT OpenCV_FOUND AND Eigen3_FOUND)
  include(cmake/OpenCV.cmake)
endif()
if (OpenCV_FOUND)
  add_library(opencv INTERFACE)
  target_link_libraries(opencv INTERFACE ${OpenCV_LIBS})
  target_include_directories(opencv SYSTEM INTERFACE ${OpenCV_INCLUDE_DIRS})
endif()
find_package(SDL3 HINTS ../tmp/sdl3)
if (NOT SDL3_FOUND)
  include(cmake/SDL3.cmake)
endif ()
find_package(Boost 1.65.0 COMPONENTS system HINTS ../tmp/boost)
if (NOT TARGET Boost::system)
  if (NOT WIN32)
    include(cmake/Boost.cmake)
  endif()
endif()
find_library(gmp_LIBRARY NAMES libgmp.a gmp HINTS ../tmp/gmp/lib NO_CACHE)
find_path(gmp_INCLUDE NAMES gmp.h HINTS ../tmp/gmp/include NO_CACHE)
if ("${gmp_LIBRARY}" STREQUAL "gmp_LIBRARY-NOTFOUND" OR
    "${gmp_INCLUDE}" STREQUAL "gmp_INCLUDE-NOTFOUND")
  if (NOT WIN32)
    include(cmake/GMP.cmake)
  endif()
endif()
if (NOT "${gmp_LIBRARY}" STREQUAL "gmp_LIBRARY-NOTFOUND" AND
    NOT "${gmp_INCLUDE}" STREQUAL "gmp_INCLUDE-NOTFOUND")
  add_library(gmp INTERFACE)
  target_link_libraries(gmp INTERFACE ${gmp_LIBRARY})
  target_include_directories(gmp SYSTEM INTERFACE ${gmp_INCLUDE})
endif()

if (WITH_CUDA)
  find_package(CUDA)
  project(goopax_examples LANGUAGES CXX CUDA)
  set (CMAKE_CUDA_STANDARD 17)
endif()

macro(add_withfile P FN)
  set(T ${ARGV})
  list(REMOVE_AT T 0 1)
  set(missing "")
  foreach(L ${T})
    if (NOT TARGET ${L})
      list(APPEND missing "${L}")
    endif()
  endforeach()
  if ("${missing}" STREQUAL "")
    message("building target ${P}")
    add_executable(${P} ${FN})
    install(TARGETS ${P} DESTINATION bin)
    foreach(L ${T})
      target_link_libraries(${P} ${L})
    endforeach()
    target_link_libraries(${P} goopax::goopax)
    if (UNIX AND NOT APPLE AND NOT CYGWIN)
      target_link_libraries(${P} -ltbb)
    endif()
    if (IOS)
      set_apple_properties(${P})
    endif()
  else()
    message("not building target ${P} [missing: ${missing}]")
  endif()
endmacro()

macro(add P)
  set(T ${ARGV})
  list(REMOVE_AT T 0)
  add_withfile(${P} ${P}.cpp ${T})
endmacro()

add_subdirectory(common/draw)

if (GOOPAX_DRAW_WITH_OPENGL OR GOOPAX_DRAW_WITH_METAL AND NOT GOOPAX_DEBUG)
  add(nbody goopax_draw)
  if (TARGET nbody)
    target_include_directories(nbody SYSTEM PRIVATE "common/draw/ext/glatter/include")
  endif()
  if (APPLE)
    SET_SOURCE_FILES_PROPERTIES( nbody.cpp PROPERTIES LANGUAGE OBJCXX )
  endif()
endif()

add(fft opencv goopax_draw)
if (IOS AND TARGET fft)
  SET_TARGET_PROPERTIES(fft PROPERTIES MACOSX_BUNDLE_INFO_PLIST "${PROJECT_SOURCE_DIR}/ios/fft.plist")
endif()

add(deep-zoom-mandelbrot gmp Boost::system goopax_draw)
add(gather)
add(mandelbrot goopax_draw)
add(svm-pingpong)
add(memory-transfer)
add(pi)
add(simple)
add(race-condition)
add(helloworld)
add(matmul Eigen3::Eigen)
add(cl-interop-1 OpenCL::OpenCL)
add(cl-interop-2 OpenCL::OpenCL)

if (WITH_CUDA)
  add_executable(cuda-interop cuda-interop.cu)
  target_link_libraries(cuda-interop goopax::goopax)
  if (UNIX AND NOT APPLE AND NOT CYGWIN)
    target_link_libraries(cuda-interop -ltbb)
  endif()
endif()
