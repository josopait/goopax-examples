cmake_minimum_required(VERSION 3.21)

project(goopax_examples LANGUAGES CXX)

if (CMAKE_VERSION VERSION_LESS "3.20")
  set (CMAKE_CXX_STANDARD 20)
else()
  set (CMAKE_CXX_STANDARD 23)
endif()

# Disabling cuda examples by default because of compatibility issues between cuda and gcc>=13
option(WITH_CUDA "WITH_CUDA" OFF)

include(cmake/macros.cmake)

set(MY_CMAKE_ARGS "")
list(APPEND MY_CMAKE_ARGS "-DCMAKE_INSTALL_RPATH_USE_LINK_PATH:BOOL=on")
if (WITH_CUDA)
  find_package(CUDA)
  project(goopax_examples LANGUAGES CXX CUDA)
  list(APPEND MY_CMAKE_ARGS "-DCMAKE_CUDA_STANDARD:STRING=17")
endif()
if (WIN32)
  if (NOT CMAKE_CONFIGURATION_TYPES)
    set(CMAKE_CONFIGURATION_TYPES "Debug")
  endif()
  if (NOT CMAKE_MSVC_RUNTIME_LIBRARY)
    set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreadedDebug")
  endif()
  list(APPEND MY_CMAKE_ARGS "-DCMAKE_CONFIGURATION_TYPES:STRING=${CMAKE_CONFIGURATION_TYPES}" "-DCMAKE_MSVC_RUNTIME_LIBRARY:STRING=${CMAKE_MSVC_RUNTIME_LIBRARY}")
elseif (APPLE)
  enable_language(OBJCXX)
  list(APPEND MY_CMAKE_ARGS "-DCMAKE_OBJCXX_STANDARD:STRING=20")
  include(cmake/common.cmake)
endif()
if (ANDROID)
  list(APPEND MY_CMAKE_ARGS "-DCMAKE_SYSTEM_NAME:STRING=Android" "-DANDROID_ABI:STRING=$ENV{ABI}" "-DANDROID_PLATFORM:STRING=$ENV{platform_version_string}" "-DANDROID_NDK:STRING=$ENV{android_sdk}/ndk/$ENV{ndk_version}" "-DCMAKE_TOOLCHAIN_FILE:STRING=$ENV{android_sdk}/ndk/$ENV{ndk_version}/build/cmake/android.toolchain.cmake")
endif()
if (ANDROID OR IOS)
  message("Applying toolchain workaround, so that packages are found.")
  list(APPEND MY_CMAKE_ARGS "-DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE:STRING=BOTH" "-DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY:STRING=BOTH" "-DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE:STRING=BOTH")
endif()
make_persistent("${MY_CMAKE_ARGS}")

find_package(goopax REQUIRED PATHS ../..)
find_package(Threads)
find_package(OpenCL)
find_package(Boost 1.65.0 COMPONENTS system atomic PATHS "${CMAKE_BINARY_DIR}/ext/boost")
find_package(SDL3 PATHS "${CMAKE_BINARY_DIR}/ext/sdl3")
find_package(Eigen3 3.3 NO_MODULE PATHS "${CMAKE_BINARY_DIR}/ext/eigen")
find_package(OpenCV PATHS "${CMAKE_BINARY_DIR}/ext/opencv" "${CMAKE_BINARY_DIR}/ext/opencv/sdk/native/jni")
find_path(GLATTER_INCLUDE_DIR
  glatter/glatter.h
  PATHS "${CMAKE_BINARY_DIR}/ext/build_glatter-prefix/src/build_glatter/include"
)

add_subdirectory(ext)
if (OpenCV_FOUND)
  add_library(opencv INTERFACE)
  target_link_libraries(opencv INTERFACE ${OpenCV_LIBS})
  target_include_directories(opencv SYSTEM INTERFACE ${OpenCV_INCLUDE_DIRS})
endif()
if (GLATTER_INCLUDE_DIR)
  add_library(glatter INTERFACE)
  target_include_directories(glatter SYSTEM INTERFACE "${GLATTER_INCLUDE_DIR}")
endif()

add_subdirectory(common/draw)
if (GOOPAX_DRAW_WITH_OPENGL OR GOOPAX_DRAW_WITH_METAL AND NOT GOOPAX_DEBUG AND NOT ANDROID)
  add_sdl_main(nbody glatter goopax_draw)
endif()

add_sdl_main(deep-zoom-mandelbrot Boost::system goopax_draw)
add_sdl_main(mandelbrot goopax_draw)
add_sdl_main(fft opencv goopax_draw)
add(gather goopax_typedefs)
add(svm-pingpong goopax_typedefs)
add(memory-transfer)
add(pi)
add(simple)
add(race-condition)
add(helloworld)
add(matmul Eigen3::Eigen goopax_typedefs)
add(cl-interop-1 OpenCL::OpenCL)
add(cl-interop-2 OpenCL::OpenCL)

if (TARGET Boost::atomic AND TARGET svm-pingpong)
  target_link_libraries(svm-pingpong Boost::atomic)
endif()
if (APPLE AND TARGET nbody)
  SET_SOURCE_FILES_PROPERTIES( nbody.cpp PROPERTIES LANGUAGE OBJCXX )
endif()
if (IOS AND TARGET fft)
  SET_TARGET_PROPERTIES(fft PROPERTIES MACOSX_BUNDLE_INFO_PLIST "${PROJECT_SOURCE_DIR}/ios/fft.plist")
endif()
if (ANDROID AND TARGET fft)
  target_link_libraries(fft mediandk camera2ndk)
endif()

if (WITH_CUDA)
  add_executable(cuda-interop cuda-interop.cu)
  target_link_libraries(cuda-interop goopax::goopax)
  if (UNIX AND NOT APPLE AND NOT CYGWIN AND NOT ANDROID)
    target_link_libraries(cuda-interop -ltbb)
  endif()
endif()
