cmake_minimum_required(VERSION 3.21)

project(goopax_examples LANGUAGES CXX)

set (CMAKE_CXX_STANDARD 20)

if (APPLE)
  enable_language(OBJCXX)
  set (CMAKE_OBJCXX_STANDARD 20)
  include(cmake/common.cmake)
endif()

# Disabling cuda examples by default because of compatibility issues between cuda and gcc>=13
option(WITH_CUDA "WITH_CUDA" OFF)

set(CMAKE_INSTALL_RPATH_USE_LINK_PATH on)

if (ANDROID OR IOS)
  message("Applying toolchain workaround, so that packages are found.")
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)
endif()

include(ExternalProject)
include(cmake/Eigen.cmake)
include(cmake/SDL3.cmake)
include(cmake/OpenCV.cmake)
include(cmake/Boost.cmake)
include(cmake/GMP.cmake)

find_package(goopax REQUIRED PATHS ../..)
find_package(Threads)
find_package(OpenCL)

find_package(Eigen3 3.3 NO_MODULE PATHS ../tmp/eigen)
if (NOT Eigen3_FOUND AND GOOPAX_EXAMPLES_BUILD_MISSING_LIBRARIES)
  set_property(TARGET eigen_gpx PROPERTY EXCLUDE_FROM_ALL 0)
endif()
find_package(OpenCV PATHS ../tmp/opencv)
if (NOT OpenCV_FOUND AND GOOPAX_EXAMPLES_BUILD_MISSING_LIBRARIES)
  if (Eigen3_FOUND)
    set_property(TARGET opencv_gpx PROPERTY EXCLUDE_FROM_ALL 0)
    if (TARGET opencv_gpx)
      ExternalProject_Get_property(opencv_gpx BINARY_DIR)
      find_package(OpenCV HINTS ${BINARY_DIR})
      if (OpenCV_FOUND)
        add_library(opencv INTERFACE)
        target_link_libraries(opencv INTERFACE ${OpenCV_LIBS})
        target_include_directories(opencv INTERFACE ${OpenCV_INCLUDE_DIRS})
      endif()
    endif()
  endif()
else()
  add_library(opencv INTERFACE)
  target_link_libraries(opencv INTERFACE ${OpenCV_LIBS})
  target_include_directories(opencv SYSTEM INTERFACE ${OpenCV_INCLUDE_DIRS})
endif()
find_package(SDL3 PATHS ../tmp/sdl3)
if (NOT SDL3_FOUND AND GOOPAX_EXAMPLES_BUILD_MISSING_LIBRARIES)
  set_property(TARGET sdl3_gpx PROPERTY EXCLUDE_FROM_ALL 0)
#  if (TARGET sdl3_gpx)
#  ExternalProject_Get_property(sdl3_gpx SOURCE_DIR)
#  ExternalProject_Get_property(sdl3_gpx BINARY_DIR)
#  add_library(sdl3 INTERFACE)
#  target_include_directories(sdl3 INTERFACE ${SOURCE_DIR}/include)
#  target_link_libraries(sdl3 INTERFACE ${BINARY_DIR}/libSDL3.a)
#  endif()
#else()
#  add_library(sdl3 INTERFACE)
#  target_include_directories(sdl3 INTERFACE ${sdl3_INCLUDE})
#  target_link_libraries(sdl3 INTERFACE ${sdl3_LIBRARY})
endif()
find_package(Boost 1.65.0 COMPONENTS system PATHS ../tmp/boost)
if (NOT TARGET Boost::system AND GOOPAX_EXAMPLES_BUILD_MISSING_LIBRARIES)
  if (NOT WIN32)
    set_property(TARGET boost_gpx PROPERTY EXCLUDE_FROM_ALL 0)
  endif()
endif()
find_library(gmp_LIBRARY NAMES libgmp.a gmp PATHS ../tmp/gmp/lib NO_CACHE)
find_path(gmp_INCLUDE NAMES gmp.h PATHS ../tmp/gmp/include NO_CACHE)
if ("${gmp_LIBRARY}" STREQUAL "gmp_LIBRARY-NOTFOUND" OR
    "${gmp_INCLUDE}" STREQUAL "gmp_INCLUDE-NOTFOUND")
  if (GOOPAX_EXAMPLES_BUILD_MISSING_LIBRARIES)
    if (NOT WIN32)
      set_property(TARGET gmp_gpx PROPERTY EXCLUDE_FROM_ALL 0)
      if (TARGET gmp_gpx)
      ExternalProject_Get_property(gmp_gpx SOURCE_DIR)
      add_library(gmp INTERFACE)
      target_link_libraries(gmp INTERFACE ${SOURCE_DIR}/.libs/libgmp.a)
      target_include_directories(gmp SYSTEM INTERFACE ${SOURCE_DIR})
      endif()
    endif()
  endif()
else()
  add_library(gmp INTERFACE)
  target_link_libraries(gmp INTERFACE ${gmp_LIBRARY})
  target_include_directories(gmp SYSTEM INTERFACE ${gmp_INCLUDE})
endif()

if (WITH_CUDA)
  find_package(CUDA)
  project(goopax_examples LANGUAGES CXX CUDA)
  set (CMAKE_CUDA_STANDARD 17)
endif()

macro(add_withfile P FN)
  set(T ${ARGV})
  list(REMOVE_AT T 0 1)
  set(missing "")
  foreach(L ${T})
    if (NOT TARGET ${L})
      list(APPEND missing "${L}")
    endif()
  endforeach()
  if ("${missing}" STREQUAL "")
    message("building target ${P}")
    add_executable(${P} ${FN})
    install(TARGETS ${P} DESTINATION bin)
    foreach(L ${T})
      target_link_libraries(${P} ${L})
    endforeach()
    target_link_libraries(${P} goopax::goopax)
    if (UNIX AND NOT APPLE AND NOT CYGWIN)
      target_link_libraries(${P} -ltbb)
    endif()
    if (IOS)
      set_apple_properties(${P})
    endif()
  else()
    message("not building target ${P} [missing: ${missing}]")
  endif()
endmacro()

macro(add P)
  set(T ${ARGV})
  list(REMOVE_AT T 0)
  add_withfile(${P} ${P}.cpp ${T})
endmacro()

add_subdirectory(common/draw)

if (GOOPAX_DRAW_WITH_OPENGL OR GOOPAX_DRAW_WITH_METAL AND NOT GOOPAX_DEBUG)
  add(nbody goopax_draw)
  if (TARGET nbody)
    target_include_directories(nbody SYSTEM PRIVATE "common/draw/ext/glatter/include")
  endif()
  if (APPLE)
    SET_SOURCE_FILES_PROPERTIES( nbody.cpp PROPERTIES LANGUAGE OBJCXX )
  endif()
endif()

add(fft opencv goopax_draw)
if (IOS AND TARGET fft)
  SET_TARGET_PROPERTIES(fft PROPERTIES MACOSX_BUNDLE_INFO_PLIST "${PROJECT_SOURCE_DIR}/ios/fft.plist")
endif()

add(deep-zoom-mandelbrot gmp Boost::system goopax_draw)
add(gather)
add(mandelbrot goopax_draw)
add(svm-pingpong)
add(memory-transfer)
add(pi)
add(simple)
add(race-condition)
add(helloworld)
add(matmul Eigen3::Eigen)
add(cl-interop-1 OpenCL::OpenCL)
add(cl-interop-2 OpenCL::OpenCL)

if (WITH_CUDA)
  add_executable(cuda-interop cuda-interop.cu)
  target_link_libraries(cuda-interop goopax::goopax)
  if (UNIX AND NOT APPLE AND NOT CYGWIN)
    target_link_libraries(cuda-interop -ltbb)
  endif()
endif()
