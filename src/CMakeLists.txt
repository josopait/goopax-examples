cmake_minimum_required(VERSION 3.21)

project(goopax_examples LANGUAGES CXX)

set (CMAKE_CXX_STANDARD 20)

if (APPLE)
  enable_language(OBJCXX)
  set (CMAKE_OBJCXX_STANDARD 20)
  include(cmake/common.cmake)
endif()

# Disabling cuda examples by default because of compatibility issues between cuda and gcc>=13
option(WITH_CUDA "WITH_CUDA" OFF)

set(CMAKE_INSTALL_RPATH_USE_LINK_PATH on)

if (ANDROID OR IOS)
  message("Applying toolchain workaround, so that packages are found.")
  set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE BOTH)
  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY BOTH)
  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE BOTH)
endif()

include(ExternalProject)
include(Eigen.cmake)
include(SDL.cmake)
#include(OpenCV.cmake)
if (NOT WIN32)
  include(Boost.cmake)
#  include(GMP.cmake)
#  if (TARGET gmp_tmp)
#    ExternalProject_Get_property(gmp_tmp SOURCE_DIR)
#    find_library(gmp_LIBRARY NAMES libgmp.a gmp HINTS ${SOURCE_DIR}/.libs NO_CACHE)
#    find_path(gmp_INCLUDE NAMES gmp.h HINTS ${SOURCE_DIR} NO_CACHE)
#  endif()
endif()

find_package(goopax REQUIRED)
find_package(Threads)
find_package(OpenCL)
find_package(Eigen3 3.3 NO_MODULE)
find_package(OpenCV)
if (TARGET OpenCV)
  add_library(opencv INTERFACE)
  target_link_libraries(opencv INTERFACE ${OpenCV_LIBS})
  target_include_directories(opencv SYSTEM INTERFACE ${OpenCV_INCLUDE_DIRS})
endif()
find_package(SDL3)
find_package(Boost 1.65.0 COMPONENTS system)
find_library(gmp_LIBRARY NAMES libgmp.a gmp NO_CACHE)
find_path(gmp_INCLUDE NAMES gmp.h NO_CACHE)
if (NOT "${gmp_LIBRARY}" STREQUAL "gmp_LIBRARY-NOTFOUND" AND
    NOT "${gmp_INCLUDE}" STREQUAL "gmp_INCLUDE-NOTFOUND")
  add_library(gmp INTERFACE)
  target_link_libraries(gmp INTERFACE ${gmp_LIBRARY})
  target_include_directories(gmp SYSTEM INTERFACE ${gmp_INCLUDE})
endif()

if (WITH_CUDA)
  find_package(CUDA)
  project(goopax_examples LANGUAGES CXX CUDA)
  set (CMAKE_CUDA_STANDARD 17)
endif()

macro(make_executable P)
  add_executable(${P} ${P}.cpp)
  target_link_libraries(${P} goopax::goopax)
  if (UNIX AND NOT APPLE AND NOT CYGWIN)
    target_link_libraries(${P} -ltbb)
  endif()
  if (IOS)
    set_apple_properties(${P})
  endif()
  install(TARGETS ${P} DESTINATION bin)
endmacro()

if (TARGET Eigen3::Eigen)
  add_subdirectory(common/draw)
endif()

if (GOOPAX_DRAW_WITH_OPENGL OR GOOPAX_DRAW_WITH_METAL AND NOT GOOPAX_DEBUG)
  #add(nbody goopax_draw)
  make_executable(nbody)
  target_link_libraries(nbody goopax_draw)
  target_include_directories(nbody SYSTEM PRIVATE "common/draw/ext/glatter/include")
  if (APPLE)
    SET_SOURCE_FILES_PROPERTIES( nbody.cpp PROPERTIES LANGUAGE OBJCXX )
  endif()
endif()

if (TARGET opencv AND TARGET goopax_draw)
  #add(fft opencv goopax_draw)
  make_executable(fft)
  target_link_libraries(fft opencv goopax_draw)
  if (IOS)
    SET_TARGET_PROPERTIES(fft PROPERTIES MACOSX_BUNDLE_INFO_PLIST "${PROJECT_SOURCE_DIR}/ios/fft.plist")
  endif()
endif()

if (TARGET gmp AND TARGET Boost::system AND TARGET goopax_draw)
  #add(deep-zoom-mandelbrot gmp Boost::system goopax_draw)
  make_executable(deep-zoom-mandelbrot)
  target_link_libraries(deep-zoom-mandelbrot gmp Boost::system goopax_draw)
endif()

if (TARGET goopax_draw)
  #add(mandelbrot goopax_draw)
  make_executable(mandelbrot)
  target_link_libraries(mandelbrot goopax_draw)
endif()

if (TARGET Eigen3::Eigen)
  #add(matmul Eigen3::Eigen)
  make_executable(matmul)
  target_link_libraries(matmul Eigen3:Eigen)
endif()

if (TARGET OpenCL::OpenCL)
  #add(cl-interop-1 OpenCL::OpenCL)
  make_executable(cl-interop-1)
  target_link_libraries(cl-interop-1 OpenCL::OpenCL)
  #add(cl-interop-2 OpenCL::OpenCL)
  make_executable(cl-interop-2)
  target_link_libraries(cl-interop-2 OpenCL::OpenCL)
endif()

if (WITH_CUDA)
  add_executable(cuda-interop cuda-interop.cu)
  target_link_libraries(cuda-interop goopax::goopax)
  if (UNIX AND NOT APPLE AND NOT CYGWIN)
    target_link_libraries(cuda-interop -ltbb)
  endif()
endif()

make_executable(gather)
make_executable(svm-pingpong)
make_executable(memory-transfer)
make_executable(pi)
make_executable(simple)
make_executable(race-condition)
make_executable(helloworld)