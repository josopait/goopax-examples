cmake_minimum_required(VERSION 3.15)

project(goopax_examples LANGUAGES CXX)

set (CMAKE_CXX_STANDARD 20)

# Disabling cuda examples by default because of compatibility issues between cuda and gcc>=13
option(WITH_CUDA "WITH_CUDA" OFF)

include(cmake/macros.cmake)

set(MY_CMAKE_ARGS "")
set(APPEND MY_CMAKE_ARGS "-DCMAKE_INSTALL_RPATH_USE_LINK_PATH:BOOL=on")
if (WITH_CUDA)
  find_package(CUDA)
  project(goopax_examples LANGUAGES CXX CUDA)
  list(APPEND MY_CMAKE_ARGS "-DCMAKE_CUDA_STANDARD:STRING=17")
endif()
if (WIN32)
  list(APPEND MY_CMAKE_ARGS "-DCMAKE_CONFIGURATION_TYPES:STRING=Debug" "-DCMAKE_MSVC_RUNTIME_LIBRARY:STRING=MultiThreadedDebug" "-DCMAKE_BUILD_TYPE:STRING=Debug" "-DOpenCV_STATIC:BOOL=ON")
  make_persistent("${MY_CMAKE_ARGS}")
elseif (APPLE)
  enable_language(OBJCXX)
  list(APPEND MY_CMAKE_ARGS "-DCMAKE_OBJCXX_STANDARD:STRING=20")
  include(cmake/common.cmake)
endif()
if (ANDROID OR IOS)
  message("Applying toolchain workaround, so that packages are found.")
  list(APPEND MY_CMAKE_ARGS "-DCMAKE_FIND_ROOT_PATH_MODE_PACKAGE:STRING=BOTH" "-DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY:STRING=BOTH" "-DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE:STRING=BOTH")
endif()

find_package(goopax REQUIRED PATHS ../..)
find_package(Threads)
find_package(OpenCL)
find_package(Boost 1.65.0 COMPONENTS system PATHS "${CMAKE_BINARY_DIR}/ext/boost")
find_package(SDL3 PATHS "${CMAKE_BINARY_DIR}/ext/sdl3")
find_package(Eigen3 3.3 NO_MODULE PATHS "${CMAKE_BINARY_DIR}/ext/eigen")
find_package(OpenCV PATHS "${CMAKE_BINARY_DIR}/ext/opencv")

add_subdirectory(ext)

add_subdirectory(common/draw)

if (GOOPAX_DRAW_WITH_OPENGL OR GOOPAX_DRAW_WITH_METAL AND NOT GOOPAX_DEBUG)
  make_goopax_exec(nbody)
  target_include_directories(nbody SYSTEM PRIVATE "common/draw/ext/glatter/include")
  target_link_libraries(nbody PRIVATE goopax_draw)
  if (APPLE)
    SET_SOURCE_FILES_PROPERTIES( nbody.cpp PROPERTIES LANGUAGE OBJCXX )
  endif()
endif()

if (OpenCV_FOUND AND TARGET goopax_draw)
  make_goopax_exec(fft)
  target_link_libraries(fft PRIVATE ${OpenCV_LIBS})
  target_include_directories(fft SYSTEM PRIVATE ${OpenCV_INCLUDE_DIRS})
  target_link_libraries(fft PRIVATE goopax_draw)
  if (IOS)
    SET_TARGET_PROPERTIES(fft PROPERTIES MACOSX_BUNDLE_INFO_PLIST "${PROJECT_SOURCE_DIR}/ios/fft.plist")
  endif()
endif()

if (Boost_FOUND AND
    TARGET goopax_draw)
  make_goopax_exec(deep-zoom-mandelbrot)
  target_link_libraries(deep-zoom-mandelbrot PRIVATE Boost::system goopax_draw)
endif()

if (TARGET goopax_draw)
  make_goopax_exec(mandelbrot)
  target_link_libraries(mandelbrot PRIVATE goopax_draw)
endif()

if (Eigen3_FOUND)
  make_goopax_exec(matmul)
  target_link_libraries(matmul PRIVATE Eigen3::Eigen)
endif()

if (OpenCL_FOUND)
  make_goopax_exec(cl-interop-1)
  target_link_libraries(cl-interop-1 PRIVATE OpenCL::OpenCL)
  make_goopax_exec(cl-interop-2)
  target_link_libraries(cl-interop-2 PRIVATE OpenCL::OpenCL)
endif()

if (IOS AND TARGET fft)
  SET_TARGET_PROPERTIES(fft PROPERTIES MACOSX_BUNDLE_INFO_PLIST "${PROJECT_SOURCE_DIR}/ios/fft.plist")
endif()

if (WITH_CUDA)
  add_executable(cuda-interop cuda-interop.cu)
  target_link_libraries(cuda-interop PRIVATE goopax::goopax)
  if (UNIX AND NOT APPLE AND NOT CYGWIN AND NOT ANDROID)
    target_link_libraries(cuda-interop PRIVATE -ltbb)
  endif()
endif()

make_goopax_exec(gather)
make_goopax_exec(svm-pingpong)
make_goopax_exec(memory-transfer)
make_goopax_exec(pi)
make_goopax_exec(simple)
make_goopax_exec(race-condition)
make_goopax_exec(helloworld)
